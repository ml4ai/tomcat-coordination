from typing import Tuple, Union, Optional

import pymc as pm

from coordination.common.types import TensorTypes
from coordination.module.module import Module, ModuleParameters, ModuleSamples
from coordination.module.latent_component import LatentComponent, LatentComponentSamples
from coordination.module.observation2 import Observation, ObservationSamples


class ComponentGroup(Module):
    """
    This class represents a component group. It groups together a latent component and different
    observations associated with it.
    """

    def __init__(self,
                 latent_component: LatentComponent,
                 observations: Dict[str, Observation]):
        """
        Creates a component group.

        @param latent_component: a latent system component.
        @param observations: a dictionary of observations associated with the latent component
            indexed by the observation module's id.
        """
        super().__init__()

        self.latent_component = latent_component
        self.observations = observations

    def draw_samples(self, seed: Optional[int]) -> ComponentGroupSamples:
        """
        Draws latent component and observations samples using ancestral sampling and some blending
        strategy with coordination and different subjects.

        @param seed: random seed for reproducibility.
        @return: latent component and observation samples for each coordination series.
        """

        latent_component_samples = self.latent_component.draw_samples(seed)
        observation_samples = {}
        for observation in self.observations:
            observation.coordination_samples = self.latent_component.coordination_samples
            observation.latent_component_samples = latent_component_samples
            observation_samples[observation.uuid] = observation.draw_samples(seed)

        return ComponentGroupSamples(latent_component_samples, observation_samples)

    def create_random_variables(self):
        self.latent_component.create_random_variables()
        for observation in observations:
            # TODO: Add transformation
            transformation = self.latent_component.latent_component_random_variable
            observation.coordination_random_variable = self.latent_component.coordination_random_variable
            observation.latent_component_random_variable = transformation
            observation.create_random_variables()


###################################################################################################
# AUXILIARY CLASSES
###################################################################################################


class ComponentGroupSamples:

    def __init__(self,
                 latent_component_samples: LatentComponentSamples,
                 observation_samples: Dict[str, ObservationSamples]):
        """
        Creates an object to store latent samples and samples from associates observations.

        @param latent_component_samples: samples generated by the latent component of the group.
        @param observation_samples: a dictionary of samples from each observation indexed by the
            observation module's id.
        """

        self.latent_component_samples = latent_component_samples
        self.observation_samples = observation_samples
