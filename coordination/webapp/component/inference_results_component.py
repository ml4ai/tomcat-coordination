import uuid

import streamlit as st
from coordination.webapp.widget.drop_down import DropDownOption, DropDown
from coordination.webapp.entity.inference_run import InferenceRun
from coordination.webapp.entity.model_variable import ModelVariableInfo
from coordination.webapp.component.inference_stats_component import InferenceStatsComponent
from coordination.webapp.component.model_variable_inference_results_component import \
    ModelVariableInferenceResultsComponent


class InferenceResultsComponent:
    """
    Represents a component that displays inference results for a model variable in an experiment
    from a particular inference run.
    """

    def __init__(self, component_key: str, inference_run: InferenceRun, experiment_id: str,
                 model_variable_info: ModelVariableInfo, model_variable_dimension: str):
        """
        Creates the component.

        @param component_key: unique identifier for the component in a page.
        @param inference_run: object containing info about an inference run.
        @param experiment_id: experiment id from the inference run.
        @param model_variable_info: object containing info about the model variable.
        @param model_variable_dimension: dimension if the variable has more than one to choose
            from.
        """
        self.component_key = component_key
        self.inference_run = inference_run
        self.experiment_id = experiment_id
        self.model_variable_info = model_variable_info
        self.model_variable_dimension = model_variable_dimension

    def create_component(self):
        """
        Displays inference results in different forms depending on the variable selected.
        """
        if not self.experiment_id:
            return

        if not self.model_variable_info:
            return

        st.write(f"### {self.experiment_id}")

        idata = self.inference_run.get_inference_data(self.experiment_id)
        if not idata:
            st.write(":red[No inference data found.]")
            return

        if self.model_variable_info.inference_mode == "inference_stats":
            inference_stats_component = InferenceStatsComponent(
                component_key=f"{self.component_key}_inference_stats",
                inference_data=idata)
            inference_stats_component.create_component()
        elif self.model_variable_info.inference_mode == "parameter_trace":
            # Add the matplotlib plot generated by a trace directly to the screen.
            st.pyplot(idata.plot_parameter_posterior(), clear_figure=True,
                      use_container_width=True)
        else:
            model_variable_inference_results_component = ModelVariableInferenceResultsComponent(
                component_key=f"{self.component_key}_model_variable_inference_results",
                model_variable_info=self.model_variable_info,
                dimension=self.model_variable_dimension,
                inference_data=idata)
            model_variable_inference_results_component.create_component()
