from __future__ import annotations

import os

from coordination.entity.trial_metadata import TrialMetadata
from coordination.entity.vocalics import Vocalics
from coordination.loader.metadata_reader import MetadataReader
from coordination.loader.vocalics_reader import VocalicsReader


class Trial:
    """
    This class encapsulates relevant information about an ASIST trial, including components for the coordination model.
    """

    def __init__(self, metadata: TrialMetadata, vocalics: Vocalics):
        self.metadata = metadata
        self.vocalics = vocalics

    @property
    def order(self):
        # Odd trials are the first and even are the second
        return 1 if int(self.metadata.number[1:]) % 2 != 0 else 2

    @classmethod
    def from_metadata_file(cls, metadata_filepath: str, vocalics_reader: VocalicsReader) -> Trial:
        """
        Gets relevant information about a trial by parsing a .metadata file
        """
        loader = MetadataReader(metadata_filepath, vocalics_reader)
        return cls(*loader.load())

    @classmethod
    def from_directory(cls, trial_dir: str) -> Trial:
        """
        Gets relevant information about a trial by reading from a directory with files generated by a previously saved
        trial object (originally loaded from a .metadata file).
        """

        metadata = TrialMetadata.from_trial_directory(trial_dir)
        vocalics = Vocalics.from_trial_directory(trial_dir)
        return cls(metadata, vocalics)

    def save(self, out_dir: str):
        trial_out_dir = f"{out_dir}/{self.metadata.number}"
        os.makedirs(trial_out_dir, exist_ok=True)

        self.metadata.save(trial_out_dir)
        self.vocalics.save(trial_out_dir)
