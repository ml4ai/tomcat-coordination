from __future__ import annotations
from typing import List

import os

from src.entity.trial_metadata import TrialMetadata
from src.config.database_config import DatabaseConfig
from src.components.speech.vocalics_component import VocalicsComponent
from src.loader.metadata_reader import MetadataReader


class Trial:
    """
    This class encapsulates relevant information about an ASIST trial, including components for the coordination model.
    """

    def __init__(self, metadata: TrialMetadata, vocalics: VocalicsComponent):
        self.metadata = metadata
        self.vocalics = vocalics

    @classmethod
    def from_metadata_file(cls, metadata_filepath: str, database_config: DatabaseConfig,
                           vocalic_features: List[str]) -> Trial:
        """
        Gets relevant information about a trial by parsing a .metadata file
        """
        loader = MetadataReader(metadata_filepath, database_config, vocalic_features)
        return Trial(*loader.load())

    @classmethod
    def from_directory(cls, trial_dir: str) -> Trial:
        """
        Gets relevant information about a trial by reading from a directory with files generated by a previously saved
        trial object (originally loaded from a .metadata file).
        """

        metadata = TrialMetadata.from_trial_directory(trial_dir)
        vocalics = VocalicsComponent.from_trial_directory(trial_dir)
        return Trial(metadata, vocalics)

    def save(self, out_dir: str):
        assert self.metadata
        assert self.vocalics

        trial_out_dir = f"{out_dir}/{self.metadata.number}"
        os.makedirs(trial_out_dir, exist_ok=True)

        self.metadata.save(trial_out_dir)
        self.vocalics.save(trial_out_dir)
